<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blogs.perl.org</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/" />
    <link rel="self" type="application/atom+xml" href="http://blogs.perl.org/atom.xml" />
    <id>tag:blogs.perl.org,2009-10-07://1</id>
    <updated></updated>
    <subtitle>There&apos;s more than one way to blog it.</subtitle>
    <generator uri="http://www.sixapart.com/movabletype/">Movable Type Pro 4.38</generator>

<entry>
    <title>Job::Machine integration</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/kaare/2015/07/jobmachine-integration.html" />
    <id>tag:blogs.perl.org,2015:/users/kaare//194.6948</id>

    <published>2015-07-31T21:24:56Z</published>
    <updated>2015-07-31T21:24:47Z</updated>

    <summary>Integrating Job::Machine into Djet....</summary>
    <author>
        <name>kaare</name>
        
    </author>
    
    <category term="djetcmsblog" label="djet cms blog" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/kaare/">
        <![CDATA[<p><a href="http://www.djet.xyz/blogs/job_machine_integration">Integrating Job::Machine into Djet.</a></p>]]>
        
    </content>
</entry>

<entry>
    <title>Dancer2::Plugin::Auth::Extensible Presentation</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/racke/2015/07/dancer2pluginauthextensible-presentation.html" />
    <id>tag:blogs.perl.org,2015:/users/racke//830.6951</id>

    <published>2015-07-31T18:41:31Z</published>
    <updated>2015-07-31T19:10:20Z</updated>

    <summary>Andrew Beverly is going to talk about https://metacpan.org/pod/Dancer2::Plugin::Auth::Extensible at the Perl Dancer Conference. This talk will give an overview of what&apos;s now possible with very little code, including user registration, password resets and the management of user details....</summary>
    <author>
        <name>Stefan Hornburg (Racke)</name>
        <uri>http://www.linuxia.de/</uri>
    </author>
    
    <category term="dancerdancer2pluginconferenceauthentication" label="Dancer Dancer2 Plugin Conference Authentication" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/racke/">
        <![CDATA[<p>Andrew Beverly is going to talk about <a href="http://www.perl.dance/talks/6-complete-user-management-using-plugin%3A%3Aauth%3A%3Aextensible">https://metacpan.org/pod/Dancer2::Plugin::Auth::Extensible</a> at the <a href="http://www.perl.dance/">Perl Dancer Conference</a>.</p>

<p>This talk will give an overview of what's now possible with very little code, including user registration, password resets and the management of user details.</p>]]>
        
    </content>
</entry>

<entry>
    <title>CPAN PRC: July is Data::Dump</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/alberto_simoes/2015/07/cpan-prc-july-is-datadump.html" />
    <id>tag:blogs.perl.org,2015:/users/alberto_simoes//250.6950</id>

    <published>2015-07-31T18:30:35Z</published>
    <updated>2015-07-31T18:33:20Z</updated>

    <summary>For July, the CPAN Pull Request Challenge assigned me Data::Dump. Better than the pull request itself, this assignment was great to know Data::Dump, as I have never see it before. For the PR, I tried to read user complains, and...</summary>
    <author>
        <name>Alberto Simões</name>
        <uri>http://ambs.perl-hackers.net/</uri>
    </author>
    
    <category term="cpan" label="cpan" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="pullrequestchallenge" label="pull-request-challenge" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/alberto_simoes/">
        <![CDATA[<p>For July, the CPAN Pull Request Challenge assigned me Data::Dump. Better than the pull request itself, this assignment was great to know Data::Dump, as I have never see it before.</p>

<p>For the PR, I tried to read user complains, and one suggestion was to keep UTF-8 intact when dumping to a stream that is utf-8 aware.  I created a basic PR, so illustrate a possible solution. Unfortunately, as on most of the previous months, I did not receive any feedback yet. But the <a href="https://github.com/gisle/data-dump/pull/14">pull request is there</a>, ready for comments or to be merged.</p>]]>
        
    </content>
</entry>

<entry>
    <title>Schedule for Swiss Perl Workshop 2015 ready</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/swiss_perl_workshop/2015/07/schedule-for-swiss-perl-workshop-2015-ready.html" />
    <id>tag:blogs.perl.org,2015:/users/swiss_perl_workshop//1551.6949</id>

    <published>2015-07-31T08:02:42Z</published>
    <updated>2015-07-31T08:04:55Z</updated>

    <summary>We are happy to announce the schedule for the Swiss Perl Workshop 2015. We will have the Perl 6 Hackathon starting on Thursday August, 27th, Talks on Friday, August, 28th and Workshops and Talks on Saturday, 29th. Since so many...</summary>
    <author>
        <name>Swiss Perl Workshop</name>
        <uri>http://www.perl-workshop.ch/</uri>
    </author>
    
    <category term="hackathon" label="hackathon" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="perl6" label="perl6" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="spw" label="spw" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="spw2015" label="spw2015" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="swiss" label="swiss" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="workshop" label="workshop" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/swiss_perl_workshop/">
        <![CDATA[<p>We are happy to announce the schedule for the Swiss Perl Workshop 2015.</p>

<p>We will have the Perl 6 Hackathon starting on Thursday <a href="http://act.perl-workshop.ch/spw2015/schedule?day=2015-08-27">August, 27th</a>, Talks on Friday, <a href="http://act.perl-workshop.ch/spw2015/schedule?day=2015-08-28">August, 28th</a> and Workshops and Talks on <a href="http://act.perl-workshop.ch/spw2015/schedule?day=2015-08-29">Saturday, 29th</a>.</p>

<p>Since so many people are contributing to this years' program, it is difficult to highlight any events.</p>

<p>Feel free to listen to the talks you are interested in</p>

<ul>
<li>War stories: programming in the field of medieval history‎‎</li>
<li>QA with Larry Wall‎</li>
<li>‎Parallelism, Concurrency, and Asynchrony in Perl 6‎</li>
<li>‎How to create CRUD database webapp in 40 minutes?‎</li>
<li>‎Whatever, or How I Stopped Worrying and Fell in Love with Perl 6 Operators‎</li>
<li>‎Normal Form Grapheme‎</li>
<li>‎API Design‎</li>
<li>‎Pearls from the contest‎</li>
<li>‎OAuth2 and Mojolicious‎</li>
<li>‎The Cool Subset of MAIN‎</li>
<li>Processing toki pona with Perl‎</li>
<li>‎Introducing Replay</li>
<li>‎Web::Machine - Simpl{e,y} HTTP‎</li>
<li>‎Genetic Algorithms in Perl</li>
</ul>

<p>or join the workshops</p>

<ul>
<li>Kickstart your Perl 6 development</li>
<li>CallBackery Hands On‎</li>
<li>Perl 6 hands on</li>
<li>Hands-on code coverage tutorial</li>
</ul>

<p>or come to meet us and do some socializing.</p>

<p>We have stil a place for you to join us, please register at <a href="http://perl-workshop.ch/">perl-workshop.ch</a>.</p>]]>
        
    </content>
</entry>

<entry>
    <title>Perl5 to Java compiler is 1 month old, and we have a hackathon</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/flavio_s_glock/2015/07/perl5-to-java-compiler-is-1-month-old-and-we-have-a-hackathon.html" />
    <id>tag:blogs.perl.org,2015:/users/flavio_s_glock//524.6947</id>

    <published>2015-07-30T20:59:39Z</published>
    <updated>2015-07-30T21:32:02Z</updated>

    <summary>We are having a hackathon at work, and Bosko, John and I have hacked together a working Perl script that executes in a Java environment (HBase)....</summary>
    <author>
        <name>Flávio S. Glock</name>
        
    </author>
    
        <category term="Java" scheme="http://www.sixapart.com/ns/types#category" />
    
        <category term="Perlito" scheme="http://www.sixapart.com/ns/types#category" />
    
    <category term="java" label="Java" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="perl5" label="perl5" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="perlito" label="perlito" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="perlito5" label="perlito5" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/flavio_s_glock/">
        <![CDATA[<p>We are having a hackathon at <a href="http://www.booking.com">work</a>, and <a href="http://blog.booking.com/author/bosko-devetak.html">Bosko</a>, <a href="http://act.yapc.eu/ye2015/talk/6327">John</a> and I have hacked together a working <a href="https://github.com/fglock/Perlito/blob/master/misc/Java/HBase.pl">Perl script</a> that executes in a Java environment (<a href="http://hbase.apache.org/">HBase</a>).</p>]]>
        
    </content>
</entry>

<entry>
    <title>Nóirín Plunkett</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/patch/2015/07/noirin-plunkett.html" />
    <id>tag:blogs.perl.org,2015:/users/patch//142.6946</id>

    <published>2015-07-30T05:20:00Z</published>
    <updated>2015-07-30T13:34:29Z</updated>

    <summary>I&apos;m sad to report that Nóirín Plunkett has passed away. Many in the Perl community knew them as a speaker and participant at YAPC::NA 2012 in Madison, Wisconsin, and YAPC::EU 2012 in Frankfurt, Germany, as well as other conferences including...</summary>
    <author>
        <name>Nova Patch</name>
        <uri>http://patch.codes</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/patch/">
        <![CDATA[<p>I'm sad to report that Nóirín Plunkett has passed away. Many in the Perl community knew them as a speaker and participant at YAPC::NA 2012 in Madison, Wisconsin, and YAPC::EU 2012 in Frankfurt, Germany, as well as other conferences including Open Source Bridge, OSCON, and ApacheConf.</p>

<p>Nóirín was passionate about open source, open documentation, and open community. In addition to their leadership within the Apache Software Foundation and the Ada Initiative, they were also a contributor to Perl v5.14. Most importantly, they were a friend and advocate to many in the open source and tech communities.</p>
]]>
        <![CDATA[<p>Goodbye Nóirín, you will be missed.</p>

<h4>Additional memorials</h4>

<ul>
<li><a href="https://adainitiative.org/2015/07/remembering-noirin-plunkett/">Ada Initiative: Remembering Nóirín Plunkett</a></li>
<li><a href="http://www.apache.org/memorials/noirin.html">The Apache Software Foundation: Nóirín Plunkett - July 29th 2015</a></li>
<li><a href="http://pjf.id.au/personal/2015/07/29/noirin.html">Paul Fenwick: Nóirín</a></li>
<li><a href="http://www.harihareswara.net/sumana/2015/07/29/0">Sumana Harihareswara: On Nóirín Trouble Plunkett's Death</a></li>
<li><a href="http://drbacchus.com/author/rbowen/">Rich Bowen: Festina Lente</a></li>
</ul>
]]>
    </content>
</entry>

<entry>
    <title>Making Alien::Base more reliable</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/graham_ollis/2015/07/making-alienbase-more-reliable.html" />
    <id>tag:blogs.perl.org,2015:/users/graham_ollis//2373.6945</id>

    <published>2015-07-29T20:41:36Z</published>
    <updated>2015-07-29T20:50:11Z</updated>

    <summary>The Alien::Base (AB) team has done a number of things over the past year with AB to make the installing packages more reliable. For AB based Alien developers who have created their own Alien::Libfoo this is great because they get...</summary>
    <author>
        <name>Graham Ollis</name>
        <uri>http://perl.wdlabs.com</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/graham_ollis/">
        <![CDATA[<p>The <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> (AB) team has done a number of things over the past year with AB to make the installing packages more reliable.  For AB based Alien developers who have created their own Alien::Libfoo this is great because they get the benefit of more reliable installs when users upgrade their version of AB without having to release a new version of Alien::Libfoo.  Though largely backward compatible with version 0.005 (or perhaps further), modern versions of AB have also been given a few interface enhancements that require changes in Alien::Libfoo in order to benefit.  So if you are an AB based Alien developer, please consider a couple of simple changes that you can make to make your distribution more reliable.</p>

<p><big>Use <tt>%c</tt> instead of <tt>%pconfigure</tt></big>.</p>

<p>Long story short, the <tt>%p</tt> directive was intended to handle the portability problem when running a command in the current directly.  On Unix this requires a <tt>./</tt> prefix.  That won’t work on Windows.  Unfortunately, configure is usually a shell script and on Windows you need MSYS (or something similar) to provide sh and friends.  Even if you had MSYS, <tt>%pconfigure</tt> won’t correctly invoke configure on Windows, because that isn’t how you run a shell script on Windows.  So back in version 0.005 we added the <tt>%c</tt> directive to mean “run configure however that works on this platform”.  If AB sees that you are using <tt>%c</tt> it will also make sure that <a href="https://metacpan.org/pod/Alien::MSYS">Alien::MSYS</a> gets added as a build requirement, if it is needed.  In many cases, adding Windows support for your AB based Alien distribution may be as simple replacing <tt>%pconfigure</tt> with <tt>%c</tt> and making AB 0.005 a prerequisite.</p>

<p><big>Require Alien::Base 0.018 (or 0.021)</big></p>

<p>In version 0.016 we introduced staged installs to blib, and in 0.018 we made it the default.  This was a significant change so while believed it shouldn't break any existing modules, out an abundance of caution, I blogged about this a while ago, and included some of the technical details:</p>

<ul><li><a href="http://blogs.perl.org/users/graham_ollis/2015/04/alienbase-past-present-and-future-upcoming-change-in-behavior-1.html">http://blogs.perl.org/users/graham_ollis/2015/04/alienbase-past-present-and-future-upcoming-change-in-behavior-1.html</a></li></ul>

<p>So far, this change has been pretty positive.  The upshot is that the cpan tester installs work in the same way as regular installs that users make.  This means that the results in your cpan testers matrix is more reliable AND more representative as to how users are actually using your module.  I strongly recommend that anyone using AB bump the required version up to 0.018.  If your package doesn’t use pkg-config consider requiring 0.021 which fixed a bug with system libraries that don’t have a pkg-config .pc file.<br />
</p>]]>
        
    </content>
</entry>

<entry>
    <title>Masking Images with Imager</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/jt_smith/2015/07/masking-images-with-imager.html" />
    <id>tag:blogs.perl.org,2015:/users/jt_smith//242.6944</id>

    <published>2015-07-27T16:00:04Z</published>
    <updated>2015-07-27T16:00:04Z</updated>

    <summary>Sometimes you want to do something fancy with images in a completely automated way.  So for example, maybe you want to turn the image on the left into the image on the right:It turns out this is a pretty simple...</summary>
    <author>
        <name>JT Smith</name>
        <uri>http://www.plainblack.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jt_smith/">
        <![CDATA[<p>Sometimes you want to do something fancy with images in a completely automated way.  So for example, maybe you want to turn the image on the left into the image on the right:</p><figure data-orig-width="900" data-orig-height="450" class="tmblr-full"><img src="https://40.media.tumblr.com/ecc40537fa8de3f9ca98077fd4e8dfa1/tumblr_inline_ns4bvpS5qt1qj3ax1_540.jpg" alt="image" data-orig-width="900" data-orig-height="450"/></figure><p>It turns out this is a pretty simple process using <a href="https://metacpan.org/pod/Imager">Imager</a>.</p><p><b>Step 1</b> - Create a blank image.</p><blockquote><p><code>use Imager;<br/>my $tile = Imager-&gt;new(xsize =&gt; 450, ysize =&gt; 450, channels =&gt; 4);<br/></code></p></blockquote><p><b>Step 2 </b>- Create a mask. This is just a PNG file that is black where you want transparency, and white or transparent where you want things to show through. In my case I created this mask.</p><figure data-orig-width="450" data-orig-height="450" class="tmblr-full"><img src="https://41.media.tumblr.com/6243fed3c9055e03833707ee14fe8109/tumblr_inline_ns4c0lbn0O1qj3ax1_540.png" alt="image" data-orig-width="450" data-orig-height="450"/></figure><p><b>Step 3 </b>- Use combine your mask with the image you want to mask.</p><blockquote><p><code>my $mask = Imager-&gt;new(file =&gt; 'mask.png');<br/>my $craftsman = Imager-&gt;new(file =&gt; ‘craftsman.png’);<br/>$tile-&gt;compose(src =&gt; $craftsman, mask =&gt; $mask);</code></p></blockquote><p><b>Step 4</b> - For extra flare, add a bevel. </p><figure data-orig-width="450" data-orig-height="450" class="tmblr-full"><img src="https://41.media.tumblr.com/f4af811c02ec8b64342e9e0b23f8e07f/tumblr_inline_ns4c5mCYIq1qj3ax1_540.png" alt="image" data-orig-width="450" data-orig-height="450"/></figure><blockquote><p><code>my $bevel = Imager-&gt;new(file =&gt; ‘bevel.png’);<br/>$tile-&gt;compose(src =&gt; $bevel, opacity =&gt; 0.8);</code></p></blockquote><p>Note: Technically, the bevel is being created in some extra software like Photoshop or Gimp, and we’re just applying it here.</p><p><b>Step 5</b> - Save the file.</p><blockquote><p><code>$tile-&gt;write(file =&gt; ‘tile.png’);</code></p></blockquote><figure data-orig-width="450" data-orig-height="450" class="tmblr-full"><img src="https://36.media.tumblr.com/002ca0b28a702e1e4a88b26618dff3bb/tumblr_inline_ns4cakzAT41qj3ax1_540.png" alt="image" data-orig-width="450" data-orig-height="450"/></figure><p>As you can see, it’s pretty easy to do some pretty cool effects in Imager. Enjoy.</p>

         <p>[From <a href="http://plainblackguy.tumblr.com">my blog</a>.]</p>

    ]]>
        
    </content>
</entry>

<entry>
    <title>Perl::ToPerl6 released to CPAN</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/drforr/2015/07/perltoperl6-released-to-cpan.html" />
    <id>tag:blogs.perl.org,2015:/users/drforr//1130.6943</id>

    <published>2015-07-26T02:35:49Z</published>
    <updated>2015-07-27T19:25:08Z</updated>

    <summary> $ perlmogrify my-script.pl $ more my-script.pl.pl6 Perl::ToPerl6 is now available on CPAN. This is the final name for the previously-mentioned Perl::Mogrify tool, with the goal of being able to transliterate (not translate, subtle distinction there) working Perl5 code into...</summary>
    <author>
        <name>DrForr</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/drforr/">
        <![CDATA[<p>    $ perlmogrify my-script.pl<br />
    $ more my-script.pl.pl6</p>

<p>Perl::ToPerl6 is now available on CPAN. This is the final name for the previously-mentioned Perl::Mogrify tool, with the goal of being able to transliterate (not translate, subtle distinction there) working Perl5 code into compilable Perl6.</p>

<p>Please ignore most of the documentation aside from the README file, as this application is heavily cribbed (read: mostly copied) from L<Perl::Critic> (Thanks Jeffrey.) This tool is meant mostly for module authors, so please don't expect (yet!) a production-quality idiomatic Perl6 translation - We're still not sure what "idiomatic" Perl6 will look like.</p>

<p>Most of my effort has gone into changing operators because that's not easily done in search-and-replace (Keep in mind '.' -> '~', '=~' -> '~~', '->' -> '.') and whitespace is now significant in more places than you'd suspect based on a casual overview. Basically I'm trying to fix most of the simple stuff that would trip people up if they're porting modules by hand.</p>

<p>Feel free to submit pull requests or issues to <a href="http://github.com/drforr/Perl-Mogrify">Perl-Mogrify</a> on GitHub (haven't changed the module name). I'll keep an eye on the RT trackers, but likely GitHub will be resolved quicker.</p>

<p>I should point out again that it's completely pluggable and extensible, so feel free to add your own modules to the L<Perl::ToPerl6::Transformer> namespace, if you're familiar with PPI. Even if you're not, I'm in the process of building a library of transform operations.</p>

<p>It's meant to make just enough changes to ensure your Perl5 code compiles under Perl6. Future modules may help make your Perl6 code more idiomatic, but for the moment focus is on getting existing Perl5 code up and running. I haven't tested the CPAN-released version on a large codebase yet, but the last time I tested it against Parse::RecDescent only 1% of the code required human intervention to get it to compile, and that was mostly refactoring away C<local *IN;> type constructs. A future conversion module may help with that.</p>

<p>From the README:</p>

<p>As of the initial release, it contains transformers for:</p>

<p>Basic data types (integers, floats, strings)<br />
    Binary, Octal and Hexadecimal integer<br />
    Floating-point trailing decimal<br />
    Here-docs<br />
    Interpolated values ("${x}", "$x-foo" etc.)<br />
    Interpolated case modifiers ("\lFoo", "\Ufoo\E" etc.)<br />
Builtins<br />
    'print $fh "text hee"'<br />
Q types<br />
    qw(), qr(), qx()<br />
Conditional constructs ('if', 'elsif', 'unless', 'when')<br />
Looping constructs ('for', 'foreach', 'while', 'until')<br />
    Transformation of C-style loops<br />
First-order operators<br />
    'map {} @foo', 'grep !2 @a'<br />
Core operators ('->', '.', '<<', '>>', '!' etc.)<br />
Package declarations ('package My::Package;', 'package My::Package {}')<br />
Package usage ('use Foo::Bar')<br />
Pragmas ('utf8', 'warnings', 'overload' etc.)<br />
Dereferencing ('%{ $foo }', '%$foo' etc.)<br />
Hashes ('$foo{a}', "$foo{'a'}" etc.)<br />
Sigils ('$x', '$a[1]', '@a', '%a{a,b}' etc.)<br />
Special variables ('@ARGV', '@+', '%ENV' etc.)<br />
Special literals ('__END__', '__PACKAGE__', '__FILE__' etc.)</p>]]>
        
    </content>
</entry>

<entry>
    <title>YAPC::EU - over 200 participants</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/gabor_szabo/2015/07/yapceu---over-200-participants.html" />
    <id>tag:blogs.perl.org,2015:/users/gabor_szabo//272.6942</id>

    <published>2015-07-24T06:55:20Z</published>
    <updated>2015-07-24T07:05:13Z</updated>

    <summary>YAPC::EU Granada has just passed 200 confirmed participants already passing two previous YAPC::EUs and there is still more than a month to go. YAPC::NA in Salt Lake City gained more than 100 additional participants in the last 30 days, but...</summary>
    <author>
        <name>Gábor Szabó - גאבור סבו</name>
        <uri>http://szabgab.com</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/gabor_szabo/">
        <![CDATA[<p><a href="http://act.yapc.eu/ye2015/">YAPC::EU Granada</a> has just passed 200 confirmed participants already passing two <a href="http://szabgab.com/yapc-perl-workshop-participants.html">previous YAPC::EUs</a> and there is still more than a month to go.</p>

<p>YAPC::NA in Salt Lake City gained more than 100 additional participants in the last 30 days, but they used a PR firm. I wonder if YAPC::EU will also get another 100 people. I try to <a href="http://szabgab.com/yapc-perl-workshop-participants.html">log the numbers</a> for future reference, but I am not sure how to help the organizers reaching more people.</p>

<p>The <a href="http://act.yapc.eu/ye2015/talks">list of talks</a> is certainly interesting and there are also the <a href="http://act.yapc.eu/ye2015/courses.html">courses</a> (and I hope my course will attract a number of people who would just want to learn AngularJS and as a side effect I can show them Perl as well.<br />
</p>]]>
        
    </content>
</entry>

<entry>
    <title>Convert::Binary::C anyone?</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/graham_ollis/2015/07/convertbinaryc-anyone.html" />
    <id>tag:blogs.perl.org,2015:/users/graham_ollis//2373.6940</id>

    <published>2015-07-22T19:53:08Z</published>
    <updated>2015-07-23T00:46:24Z</updated>

    <summary>I&apos;m interested in getting Convert::Binary::C into a properly maintained state once again. It has a pod test that is failing (which should be an author or release test) and a regex deprecation warning in 5.22 that will likely render it...</summary>
    <author>
        <name>Graham Ollis</name>
        <uri>http://perl.wdlabs.com</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/graham_ollis/">
        <![CDATA[<p>I'm interested in getting <a href="https://metacpan.org/pod/Convert::Binary::C">Convert::Binary::C</a> into a properly maintained state once again.  It has a pod test that is failing (which should be an author or release test) and a regex deprecation warning in 5.22 that will likely render it uninstallable without patching in a future version of Perl.  It's a really great module, and doesn't need a lot of changes just a few simple fixes.  I've attempted to contact the author via rt, email and twitter.  I'd be happy to adopt the module and resolve non-contentious bugs this module has collected.  I believe I have a pretty good record on past adoptions, but I'd also be happy for someone else to do it, my goal is only to get a couple of pretty simple bug fixes into the module.  If I don't hear from anyone I will try to adopt via the modules list.</p>

<p><b>edit</b>: The original author has uploaded a new version with these (and a number of other) issues resolved!</p>]]>
        
    </content>
</entry>

<entry>
    <title>A hackable text editor for the 21st Century</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/jt_smith/2015/07/a-hackable-text-editor-for-the-21st-century.html" />
    <id>tag:blogs.perl.org,2015:/users/jt_smith//242.6941</id>

    <published>2015-07-22T16:00:03Z</published>
    <updated>2015-07-22T16:00:03Z</updated>

    <summary>A hackable text editor for the 21st Century [From my blog.]...</summary>
    <author>
        <name>JT Smith</name>
        <uri>http://www.plainblack.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jt_smith/">
        <![CDATA[<a href="https://atom.io">A hackable text editor for the 21st Century</a>

         <p>[From <a href="http://plainblackguy.tumblr.com">my blog</a>.]</p>

    ]]>
        
    </content>
</entry>

<entry>
    <title>Getting modern with logging via Log4perl</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/dean/2015/07/getting-modern-with-logging-via-log4perl.html" />
    <id>tag:blogs.perl.org,2015:/users/dean//558.6936</id>

    <published>2015-07-21T23:47:14Z</published>
    <updated>2015-07-21T23:52:57Z</updated>

    <summary>From last night&apos;s Sydney PM, my talk on Log4perl. In retrospect I should have named it &quot;Logging: Not the fun kind with chainsaws and axes, but the boring kind with grep and less&quot;. Check it out: Also worth sharing, from...</summary>
    <author>
        <name>Dean</name>
        <uri>http://bytefoundry.com.au</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>From last night's <a href="https://www.facebook.com/sydneypm">Sydney PM</a>, my talk on Log4perl. In retrospect I should have named it "Logging: Not the fun kind with chainsaws and axes, but the boring kind with grep and less". Check it out:</p>

<p><iframe src="https://www.slideshare.net/slideshow/embed_code/key/ltEr6ilQV0F7g4" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>

<p>Also worth sharing, from much discussion about the recent fad for "dashboards", is the perl Dancer based <a href="https://github.com/fastmail/towncrier">towncrier</a> from the nice people at FastMail.fm. See their live usage of it <a href="http://www.fastmailstatus.com/">here</a>.</p>]]>
        
    </content>
</entry>

<entry>
    <title>Has YAPC::NA 2016 been announced?</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/gabor_szabo/2015/07/has-yapcna-2016-been-announced.html" />
    <id>tag:blogs.perl.org,2015:/users/gabor_szabo//272.6939</id>

    <published>2015-07-22T06:54:41Z</published>
    <updated>2015-07-22T06:58:39Z</updated>

    <summary>I don&apos;t seem to remember any blog post here or on TPF. Has the location, time or the organizers of YAPC::NA been announced?...</summary>
    <author>
        <name>Gábor Szabó - גאבור סבו</name>
        <uri>http://szabgab.com</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/gabor_szabo/">
        <![CDATA[<p>I don't seem to remember any blog post here or on <a href="http://news.perlfoundation.org/">TPF</a>. Has the location, time or the organizers of <a href="http://www.yapcna.org/">YAPC::NA</a> been announced?<br />
</p>]]>
        
    </content>
</entry>

<entry>
    <title>Alien::Base: System Integrators vs. CPAN Authors</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/graham_ollis/2015/07/alienbase-system-integrators-vs-cpan-authors.html" />
    <id>tag:blogs.perl.org,2015:/users/graham_ollis//2373.6938</id>

    <published>2015-07-22T07:36:58Z</published>
    <updated>2015-07-22T07:52:21Z</updated>

    <summary>Last week I promised (or threatened depending on your outlook) to talk about Alien::Base in the context of system integration and distribution packagers. Philosophy: The philosophy for Alien::Base has always been that the system library should be used when it...</summary>
    <author>
        <name>Graham Ollis</name>
        <uri>http://perl.wdlabs.com</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/graham_ollis/">
        <![CDATA[<p>Last week I promised (or threatened depending on your outlook) to talk about <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> in the context of system integration and distribution packagers.</p>

<p><big>Philosophy:</big></p>

<p>The philosophy for <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> has always been that the system library should be used when it is available, and if not, the source code for that library can be downloaded and installed for you.  My own <a href="https://metacpan.org/pod/Alien::FFI">Alien::FFI</a> (isa <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a>) which provides <a href="https://sourceware.org/libffi/">libffi</a>, and <a href="https://metacpan.org/pod/FFI::Platypus">FFI::Platypus</a> which uses it is a good example of the success of this approach as you can see from their respective <a href="http://matrix.cpantesters.org/?dist=Alien-FFI+0.12">testing</a> <a href="http://matrix.cpantesters.org/?dist=FFI-Platypus+0.37">matrices</a>.</p>

<p><a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> is of course trying to keep everyone happy all of the time, and everyone knows that is impossible.  System vendors complain that <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> has too many dependencies.  Module authors fear that using the system library will make it too hard to support their XS modules since they could end up linking against almost anything.  These perspectives frequently clash and it can be a challenge to maintain empathy for other parties when they do.</p>

<p>Yes, <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> has a number of non-core dependencies that don’t do much when you simply end up using the system library.  On the other hand, many of them, such as Capture::Tiny and URI are useful in their own right.  In addition once you’ve gone through the pain of providing a package for <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> and its dependencies you can use it again for other <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> based distributions and the XS modules that use them without having to bug their maintainers with patches.  If something in <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> doesn’t quite work with your build system, please notify us right away so that we can fix it!  We don’t hate you.  We just work in a different environment that you and may be unaware of your pain.  As an example, we added support for destdir (commonly used when creating Linux binary packages) back in version 0.005.  I take responsibility for unintentionally breaking that in version 0.017, since we didn’t have a test for destdir installs.  Thanks to feedback we’ve fixed that and added a test that will make sure that it doesn’t happen again.</p>

<p>Yes, depending on the system library does have its challenges, and it makes me personally uneasy to think about all the ways that something could go wrong.  On the other hand there are also benefits to using the system library, as they are usually optimized for the particular environment and will more likely to have security patches applied.  It is also good to keep in mind that nobody is asking you to support the system library.  That is the responsibility of the system developer.  I do ask that you not actively stand in the way of people who DO want to support the system library.  If there are known bad versions, <a href="https://metacpan.org/pod/distribution/Alien-Base/lib/Alien/Base/FAQ.pod#How-do-I-specify-a-minimum-or-exact-version-requirement-for-packages-that-use-pkg-config">there is a way to specify a minimum or specific library version</a>, which should be good enough in most situations.</p>

<p>Fundamentally, it’s good to assume good faith, until you can prove otherwise.  Remember that for a CPAN author using <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> makes developing and maintaining Alien distributions easier.  Remember that for a system vendor, being able to maintain just one version of a library saves time and reduces bugs.</p>

<p><big>Technical:</big></p>

<p>The rest of this entry includes some technical notes that may be useful for system vendors, and those that are really interested in Alien.</p>

<p>I mentioned that destdir support was broken in 0.017 (it was fixed again in 0.022).  Ironically in most cases you will actually not want to take advantage of this feature, since it is only required when building the library from source, rather than using the system library.  In the next version of <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> I hope to have an interface to make it fail when the system library cannot be detected.  This is usually what system vendors who provide the library as a separate package will want.  If you want to have some say in how this interface is exposed, now is an excellent time to make yourself heard:</p>

<p><a href="https://github.com/Perl5-Alien/Alien-Base/pull/135">https://github.com/Perl5-Alien/Alien-Base/pull/135</a></p>

<p><a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> based modules should almost never be a run-time prerequisite with newer versions of <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a>, so long as they use the <tt>alien_isoloate_dynamic option</tt>.  This is highly recommended as long as your package can be built as a static library, which is almost always what you want when you are building an Alien package from source for XS.</p>

<p>Disclaimer: the remainder of this entry represents my opinions only, and not those of the <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> team.  This is true for everything that I write here, but in particular my last two points should be considered either unsettled or controversial.</p>

<p>Perl usually has paths for architecture specific and platform independent module files. <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> does not install into the architecture specific directory by default, even though in most cases it does install architecture specific files.  I am not entirely sure that I agree this is right, but we weren’t able to achieve consensus on changing it.  There is now an option and an environment variable to change this behavior. The reason you might want to install into the architecture specific path is if you are installing to a non-homogeneous environment such as AFS.  Another use case would be if you were creating a system package for for a library that isn’t otherwise provided by your operating system, and will thus be built by the <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> system from source.</p>

<p>Finally, I feel there is some room for slimming the dependencies on <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> if people make the case.  If there are some prereqs that seem unreasonable, please open a ticket on the project GitHub (I can’t guarantee that you won’t be the one to do the actual work so be careful what you wish for).  As an example, now that <a href="https://metacpan.org/pod/Archive::Extract">Archive::Extract</a> has been removed from the core, it might be worth investigating switching to <a href="https://metacpan.org/pod/Archive::Tar">Archive::Tar</a> (still in the core) which should work in most cases and pulling in <a href="https://metacpan.org/pod/Archive::Zip">Archive::Zip</a> only when it is needed, which should cover virtually all other cases.  The dependency on <a href="https://metacpan.org/pod/Module::Build">Module::Build</a> (MB) is probably not too popular amongst its MB detractors.  At the moment I don’t see a good alternative, but I have some ideas on how to proceed if this is important to you.</p>]]>
        
    </content>
</entry>

<entry>
    <title>Grant idea - DBIx::Class re-documentation</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/makoto_nozaki/2015/07/grant-idea---dbixclass-re-documentation.html" />
    <id>tag:blogs.perl.org,2015:/users/makoto_nozaki//393.6937</id>

    <published>2015-07-22T01:22:52Z</published>
    <updated>2015-07-23T04:57:26Z</updated>

    <summary>Peter Rabbitson sent me this idea: I can not think of anything qualifying as doesn&apos;t have to be a huge Perl project* However, I have an idea which unquestionably will benefit the Perl community immensely, yet has a remarkably low...</summary>
    <author>
        <name>Makoto Nozaki</name>
        <uri>http://facebook.com/nozaki</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/makoto_nozaki/">
        <![CDATA[<p>Peter Rabbitson sent me this idea:</p>

<p>I can not think of anything qualifying as <em>doesn't have to be a huge Perl project</em>* However, I have an idea which unquestionably will benefit the Perl community immensely, yet has a remarkably low barrier to entry (mainly one thing - patience). I propose that someone applies for a grant in the role of <strong>DBIx::Class re-documentation project lead</strong>. </p>

<p>I have had inklings of "there got to be a better way to do things", but it wasn't until I read <a href="http://www.perlmonks.org/?node_id=1133234">this meditation by BrowserUK</a> that it dawned at me: Fixing up the better-than-most-but-still-terrible documentation of DBIC is a ~200 person-hour undertaking, which on top of that requires someones fresh eye. Given that DBIx::Class is a "staple-module" in the contemporary Perl ecosystem, I believe it is reasonable to expect for the TPF to "pick up the tab" if someone with the right qualifications steps up. </p>

<p>So what is wrong with DBIC's documentation anyway?</p>

<ul>
<li>Lack of entry level architectural documentation steering a beginner towards most effective use of this library
<ul>
<li>It is not clear DBIC is not exclusively an ORM</li>
<li>It is not clear what is the primary problem it is intended to solve</li>
</ul></li>
<li>Lack of a consistent overarching approach to the subject - the current docs are riddled with localized fixups, completely ignoring the "larger picture". As examples consider:
<ul>
<li>https://github.com/dbsrgits/dbix-class/pull/21#issuecomment-15849436</li>
<li>https://rt.cpan.org/Ticket/Display.html?id=63843#txn-867585</li>
<li>or perhaps https://rt.cpan.org/Ticket/Display.html?id=83767#txn-1188058</li>
</ul></li>
<li>Lack of documentation clearly delineating the components, and extension points
<ul>
<li>Lack of clarity what is and what isn't safely overrideable</li>
</ul></li>
<li>Too many "learn by doing" tutorials, unaligned and sometimes even conflicting with each other</li>
<li>Lack of proper versioning markers in the reference documentation (X available since version such and such)</li>
<li>Lack of consistent documentation of method signatures</li>
<li>Inconsistent/incomplete exception texts: Ideally a DBIx/Class/Diag.pod modeled on 'perldoc perldiag' as a central exception text repository (though note - categorically no exception objects)</li>
<li>Worst part - a number of other problems that I am completely unaware of, as I know the source code inside-and-out, and can only notice the "disconnect" based on questions being repeatedly asked on IRC  So what would the ideal candidate for the job would look like?</li>
<li>You have general familiarity with Perl conventions and "perlish documentation practices" You have decent understanding of SQL, ideally being able to follow <a href="https://www.youtube.com/watch?v=5d0umrIFPR0">this presentation in its entirety</a></li>
<li>You are able to dedicate <strong>large contiguous blocks of time</strong> to the project</li>
<li>You are not afraid to ask followup questions and followups to the followups, until you have a solid understanding of the thing you are actually trying to document.</li>
<li>You have little experience with DBIx::Class - this is not a typo: the cleaner your slate is when starting, the better you will be able to grasp the very essence of this library and be able to present in a language accessible by those who will be consuming your work in the future. I believe the work needs to at least be able to capture things like:
<ul>
<li>DBIC is decidedly not a classic ORM</li>
<li>DBIx::Class::Core is an under-designed reference implementation</li>
<li>DBIC in no way mandates a properly designed schema</li>
</ul></li>
<li>You are patient
<ul>
<li>It is of paramount importance to ensure that the documentation does not become worse than it is now. This will likely involve multiple iterations to ensure code and documentation agree (in case of disagreement code always wins, but the goal is to eliminate all such mismatches in the first place)</li>
<li>Moreover it is quite likely that your work will not show up on CPAN several months (up to a year) after the grant is successfully completed. The library is the bedrock of hundreds of businesses worldwide, hence the current architect is extremely conservative in both matters of code and docs. What will the project provide to a successful/approved applicant?</li>
</ul></li>
<li>Authority to demand full and timely answers to any questions you they have arising from the current documentation, code, or comments.</li>
<li>Unlimited access to a person with <strong>complete</strong> (as in "familiar with <strong>every single line</strong>") knowledge of the codebase. What else is missing?</li>
<li>Probably a grant manager - while being versed in all things perl5, I am rather terrible at progress reports, and other bureaucracy. Besides the "unlimited access to answers" will keep me busy enough as it is. </li>
</ul>

<p>So... any takers? Praises? Flames? :))) </p>

<p>Cheers Peter "ribasushi" Rabbitson Principal DBIx::Class cat herder </p>

<p>* In fact I strongly believe that work taking "a few weekends" can not possibly benefit the community, and framing the requests this way actively hurts the grants but that's a whole another topic.</p>
]]>
        

    </content>
</entry>

<entry>
    <title>a perl5 to Java compiler - first benchmark</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/flavio_s_glock/2015/07/a-perl5-to-java-compiler---first-benchmark.html" />
    <id>tag:blogs.perl.org,2015:/users/flavio_s_glock//524.6935</id>

    <published>2015-07-21T23:34:04Z</published>
    <updated>2015-07-21T23:45:38Z</updated>

    <summary>I&apos;ve written a small performance test. And it is not bad! First perl: $ time perl misc/Java/benchmark.pl done 64000000 real 0m3.964s user 0m3.963s sys 0m0.004s And then Perl-in-Java: $ touch Test.class ; rm Test.class ; perl perlito5.pl -Isrc5/lib -I. -It...</summary>
    <author>
        <name>Flávio S. Glock</name>
        
    </author>
    
        <category term="Java" scheme="http://www.sixapart.com/ns/types#category" />
    
        <category term="Perlito" scheme="http://www.sixapart.com/ns/types#category" />
    
    <category term="java" label="Java" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="perlito5" label="Perlito5" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/flavio_s_glock/">
        <![CDATA[<p>I've written a small <a href="https://github.com/fglock/Perlito/blob/master/misc/Java/benchmark.pl">performance test</a>. And it is not bad!</p>

<p>First perl:</p>

<pre><code>$ time perl misc/Java/benchmark.pl
done 64000000

real    0m3.964s
user    0m3.963s
sys     0m0.004s
</code></pre>

<p>And then Perl-in-Java:</p>

<pre><code>$ touch Test.class ; rm Test.class ; perl perlito5.pl -Isrc5/lib -I. -It -Cjava misc/Java/benchmark.pl &gt; Test.java ; javac Test.java ; time java Test
done 64000000

real    0m0.840s
user    0m0.584s
sys     0m0.302s
</code></pre>
]]>
        

    </content>
</entry>

<entry>
    <title>Web application development course before YAPC::EU</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/gabor_szabo/2015/07/web-application-development-course-before-yapceu.html" />
    <id>tag:blogs.perl.org,2015:/users/gabor_szabo//272.6934</id>

    <published>2015-07-21T09:05:57Z</published>
    <updated>2015-07-21T09:07:13Z</updated>

    <summary>Just a reminder that I am running a 2-days long course before YAPC::EU in Granada, Spain. In the course I am going to teach web application development using Perl Dancer and MongoDB in the back-end, and AngularJS in the front-end....</summary>
    <author>
        <name>Gábor Szabó - גאבור סבו</name>
        <uri>http://szabgab.com</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/gabor_szabo/">
        <![CDATA[<p>Just a reminder that I am running a 2-days long course before <a href="http://act.yapc.eu/ye2015/">YAPC::EU in Granada, Spain</a>.</p>

<p>In the course I am going to teach web application development using Perl Dancer and MongoDB in the back-end, and AngularJS in the front-end.</p>

<p>Actually, we are going to see a version of the front-end code using plain HTML with JQuery and Handlebars, and then another version using AngularJS.</p>

<p>There are still places left in <a href="http://act.yapc.eu/ye2015/courses.html#course1">the course</a>.<br />
</p>]]>
        
    </content>
</entry>

<entry>
    <title>a perl5 to Java compiler - week 3</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/flavio_s_glock/2015/07/a-perl5-to-java-compiler---week-3.html" />
    <id>tag:blogs.perl.org,2015:/users/flavio_s_glock//524.6933</id>

    <published>2015-07-21T12:24:42Z</published>
    <updated>2015-07-21T12:41:13Z</updated>

    <summary>The compiler now has a small test suite. The main additions in the last 10 days were implementing global variables, better support for references, data structures, string interpolation, and a few new subroutines in the CORE namespace and operators....</summary>
    <author>
        <name>Flávio S. Glock</name>
        
    </author>
    
        <category term="Java" scheme="http://www.sixapart.com/ns/types#category" />
    
        <category term="Perlito" scheme="http://www.sixapart.com/ns/types#category" />
    
    <category term="java" label="Java" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="perlito" label="Perlito" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="perlito5" label="perlito5" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/flavio_s_glock/">
        <![CDATA[<p>The <a href="http://blogs.perl.org/users/flavio_s_glock/2015/07/a-perl5-to-java---work-in-progress.html">compiler</a> now has a small <a href="https://github.com/fglock/Perlito/blob/master/misc/Java/Test.pl">test suite</a>. The main additions in the last 10 days were implementing global variables, better support for references, data structures, string interpolation, and a few new subroutines in the CORE namespace and operators.</p>]]>
        
    </content>
</entry>

<entry>
    <title>Android Client for Lacuna Expanse</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/jt_smith/2015/07/android-client-for-lacuna-expanse.html" />
    <id>tag:blogs.perl.org,2015:/users/jt_smith//242.6932</id>

    <published>2015-07-20T16:00:03Z</published>
    <updated>2015-07-20T16:00:03Z</updated>

    <summary>Android Client for Lacuna Expanse: A member of The Lacuna Expanse community has built a new client for Android devices. Still in beta, but cool. [From my blog.]...</summary>
    <author>
        <name>JT Smith</name>
        <uri>http://www.plainblack.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jt_smith/">
        <![CDATA[<a href="https://play.google.com/store/apps/details?id=com.jazzdevstudio.lacunaexpress&hl=en">Android Client for Lacuna Expanse</a>: <p>A member of <a href="http://www.lacunaexpanse.com">The Lacuna Expanse</a> community has built a <a href="https://play.google.com/store/apps/details?id=com.jazzdevstudio.lacunaexpress">new client for Android</a> devices. Still in beta, but cool.</p>

         <p>[From <a href="http://plainblackguy.tumblr.com">my blog</a>.]</p>

    ]]>
        
    </content>
</entry>

<entry>
    <title>Tomorrow night, Sydney-PM</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/dean/2015/07/tomorrow-night-sydney-pm.html" />
    <id>tag:blogs.perl.org,2015:/users/dean//558.6931</id>

    <published>2015-07-19T23:51:30Z</published>
    <updated>2015-07-20T09:51:37Z</updated>

    <summary>Please join us tomorrow night, (21st July) at 6pm for our monthly meeting. Full details including location etc in this post Fliers can be downloaded here and why not like us on Facebook...</summary>
    <author>
        <name>Dean</name>
        <uri>http://bytefoundry.com.au</uri>
    </author>
    
    <category term="sydneysydneypm" label="sydney sydney-pm" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>Please join us tomorrow night, (21st July) at 6pm for our monthly meeting.</p>

<p>Full details including location etc in <a href="http://blogs.perl.org/users/dean/2015/07/sydney-pm-july-2015.html">this post</a></p>

<p>Fliers can be <a href="http://bytefoundry.com.au/pdfs/SYDNEY%20PERL%20MONGERS%20-%20POSTER%20-%20PRINT%20-%20A4.pdf">downloaded here</a> and why not <a href="https://www.facebook.com/sydneypm">like us on Facebook</a></p>]]>
        
    </content>
</entry>

<entry>
    <title>Grant idea - OData</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/makoto_nozaki/2015/07/grant-idea---odata.html" />
    <id>tag:blogs.perl.org,2015:/users/makoto_nozaki//393.6930</id>

    <published>2015-07-18T02:00:00Z</published>
    <updated>2015-07-18T02:28:55Z</updated>

    <summary>Alex aka ASB gave me this proposal: We (the Perl community) currently do not have a CPAN module that handles OData (cf. odata.org). There seems tob e an attempt to do it here: OData::Client But it&apos;s not finished yet, and...</summary>
    <author>
        <name>Makoto Nozaki</name>
        <uri>http://facebook.com/nozaki</uri>
    </author>
    
    <category term="grants" label="Grants" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/makoto_nozaki/">
        <![CDATA[<p>Alex aka ASB gave me this proposal:</p>

<blockquote>
  <p>We (the Perl community) currently do not have a CPAN module that handles OData (cf. <a href="http://www.odata.org/">odata.org</a>).
There seems tob e an attempt to do it here: <a href="https://github.com/mrallen1/OData--Client">OData::Client</a>
But it's not finished yet, and i fit doesn't get a care taker, it will never be done.
Also, there is client and server parts. Let's get both :)</p>

<p>Side node:
Eventually, I'm too dumb to see that we don't need one because Perl can do it out oft he box.
But if this ist he case, eventuelly, it would be a good idea to put up a grant to create a document describing how to use OData with Perl (like <a href="http://scn.sap.com/community/developer-center/front-end/blog/2014/05/26/the-power-of-odata">this one</a>)</p>
</blockquote>
]]>
        

    </content>
</entry>

<entry>
    <title>Perl Dancer Conference 2015 - Call for Papers</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/racke/2015/07/perl-dancer-conference-2015---call-for-papers.html" />
    <id>tag:blogs.perl.org,2015:/users/racke//830.6929</id>

    <published>2015-07-17T18:08:44Z</published>
    <updated>2015-07-17T18:18:15Z</updated>

    <summary>The Call for Papers for the Perl Dancer Conference 2015 in Vienna is now open! We are accepting presentations in a wide range of topics, for example Dancer, Modern Perl, DBIx::Class, Perl &quot;products&quot; and security. Of course, we are open...</summary>
    <author>
        <name>Stefan Hornburg (Racke)</name>
        <uri>http://www.linuxia.de/</uri>
    </author>
    
    <category term="dancerconference" label="Dancer Conference" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/racke/">
        <![CDATA[<p>The Call for Papers for the <a href="http://www.perl.dance">Perl Dancer Conference 2015</a> in Vienna is now open!</p>

<p>We are accepting presentations in a wide range of topics, for example Dancer, Modern Perl, DBIx::Class, Perl "products" and security. Of course, we are open for any idea and submission.</p>

<p>The submission deadline is <strong>August 31th</strong>, midnight CET. Talks are <strong>reviewed</strong> and possibly accepted <strong>as we receive them.</strong></p>

<p>Please use the <a href="http://www.perl.dance/talks/submit">online form</a> for submitting your talk.</p>

<p>Questions? Feel free to ask! Either put a comment here or send an email to <a href="mailto:2015@perl.dance"></a></p>]]>
        
    </content>
</entry>

<entry>
    <title>MakeMaker among the stars</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/aristotle/2015/07/makemaker-among-the-stars.html" />
    <id>tag:blogs.perl.org,2015:/users/aristotle//15.6928</id>

    <published>2015-07-17T00:13:15Z</published>
    <updated>2015-07-17T00:17:29Z</updated>

    <summary>It is part of our solar system now. Now that’s legacy. Maybe the fault is, indeed, not in our stars....</summary>
    <author>
        <name>Aristotle</name>
        <uri>http://plasmasturm.org/</uri>
    </author>
    
        <category term="Funnies" scheme="http://www.sixapart.com/ns/types#category" />
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/aristotle/">
        <![CDATA[<p><a href="https://en.wikipedia.org/wiki/Makemake">It is part of our solar system now</a>.</p>

<p>Now <em>that’s</em> legacy.</p>

<p>Maybe the fault is, indeed, not in our stars.</p>
]]>
        

    </content>
</entry>

<entry>
    <title>Benchmark your failures</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/veryrusty/2015/07/benchmark-your-failures.html" />
    <id>tag:blogs.perl.org,2015:/users/veryrusty//2569.6927</id>

    <published>2015-07-16T11:18:46Z</published>
    <updated>2015-07-16T11:42:29Z</updated>

    <summary>Ever given any thought as to what the expense of catching exceptions with Try::Tiny or even eval might be? Recently a colleague was having some issues with a legacy codebase that was having requests exceed their nginx proxy timeouts. We...</summary>
    <author>
        <name>Russell Jenkins</name>
        
    </author>
    
        <category term="Benchmarking" scheme="http://www.sixapart.com/ns/types#category" />
    
        <category term="Profiling" scheme="http://www.sixapart.com/ns/types#category" />
    
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/veryrusty/">
        <![CDATA[<p>Ever given any thought as to what the expense of catching exceptions with <code>Try::Tiny</code> or even <code>eval</code> might be?</p>

<p>Recently a colleague was having some issues with a legacy codebase that was having requests exceed their nginx proxy timeouts. We discussed increasing those timeouts, but considered that a last resort.</p>

<p>One block of code being executed was along the lines of<br />
<pre><code><br />
eval { do_this() };<br />
if (! $@) {<br />
  plan_a()<br />
} else {<br />
  plan_b()<br />
}<br />
</code></pre><br />
which may not cause your spider sense to tingle. Note that the exception that is caught is not used in further calculations, or even reported or logged. Any tingles yet?</p>

<p><br />
There are several great tools available on the CPAN to help identify slow parts of your codebase, such as the <code>Devel::NYTProf</code> profiler, and packages to benchmark changes such as <code>Dumbbench</code>. Any attempts at optimisation without first profiling your code is certainly going to be premature.</p>

<p>Our production servers were taking almost 40 seconds to execute the part of code that contains the above block. Profiling using same set of production data produced very unexpected results. 8.5 million calls to <code>Carp::croak</code> during the run and 8.5 million calls to <code>plan_b</code>. Hmmm... WTF?</p>

<p>Working through the profile output confirmed that when <code>do_this</code> failed, it called <code>Carp::croak</code>, which then generates a (short) error message relative to the caller. In isolation that would be fine; however this was happening millions times and the generated error message is ignored.</p>

<p>Changing the `croak` to a `die` should improve the performance as there is no need to determine the caller in our use case, but by how much? Benchmarking that hypothesis gave a 50% reduction in runtime on the same dataset. Win!</p>

<p>Is the problem solved? Only partially. There is still a design smell; the code needs to be redesigned to eliminate the error trapping that wraps calls to <code>plan_b()</code>. Handling the bulk of those cases in a more straight forward manner is a better solution. More on that at a later date!<br />
</p>]]>
        
    </content>
</entry>

<entry>
    <title>Alien::Base 0.020 and #native</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/graham_ollis/2015/07/alienbase-0020-and-native.html" />
    <id>tag:blogs.perl.org,2015:/users/graham_ollis//2373.6926</id>

    <published>2015-07-15T16:27:26Z</published>
    <updated>2015-07-16T04:30:27Z</updated>

    <summary>This week we rolled out the latest version of Alien::Base which includes a new feature and a bug fix. The most important change in this version are the two new avenues of communication that we have adopted, so I will...</summary>
    <author>
        <name>Graham Ollis</name>
        <uri>http://perl.wdlabs.com</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/graham_ollis/">
        <![CDATA[<p>This week we rolled out the latest version of <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> which includes a new feature and a bug fix.  The most important change in this version are the two new avenues of communication that we have adopted, so I will discuss that first.</p>

<p>The first is that we have established the <a href="https://chat.mibbit.com/?channel=%23native&server=irc.perl.org">#native</a> channel on irc.perl.org to discuss interactions with native interfaces.  This includes <a href="https://metacpan.org/pod/Alien">Alien</a> in general, <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> specifically, and we also intend it to be a place to discuss <a href="https://metacpan.org/pod/FFI::Platypus">FFI</a> (Foreign Function Interface or NativeCall), as there is a degree of overlap for the people involved.  You can now click on a big red button from the metacpan page for the project that will log you into IRC and allow you to start  asking questions (or complain at us if that is what needs doing).</p>

<p>The second communication improvement is the creation of an Alien::Base FAQ (see <a href="https://metacpan.org/pod/Alien::Base::FAQ">Alien::Base::FAQ</a>).  I promised this last year but only recently got around to writing it.  It consists of a number of questions (and corresponding answers) that I personally had when I was trying to figure out how to develop my own <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> based Alien distributions.   I’m hoping this guide will help those that are getting started now.</p>

<p>One thing that working on the FAQ reminded me of is that although it is relatively simple to create and maintain an <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> based Alien distribution if your package uses autoconf and pkg-config, it is a little more challenging if your package does not use these tools.  Things that are doable, but present their own set of challenges include CMake, autoconf-like, and vanilla makefiles.  I’ve done my best to illustrate the techniques to work with these technologies, usually only a few lines of code need to be added to your <tt>Build.PL</tt>.  I wrote <a href="https://metacpan.org/pod/Alien::Libbz2">Alien::Libbz2</a> while I was working on the FAQ to serve as a working example of a non-autoconf / non-pkg-config package, and also to verify the techniques are correct.</p>

<p>For those who use Dist::Zilla, I used <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::Alien">Dist::Zilla::Plugin::Alien</a> when writing <a href="https://metacpan.org/pod/Alien::Libbz2">Alien::Libbz2</a>, so it serves as a good example of how to bridge the worlds of Dist::Zilla and Alien.  While working on this, I worked with Zakariyya Mughal to drive development of the plugin itself.  The plugin is now up to date once again feature wise with <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a>.</p>

<p>Aside from the new IRC channel and the FAQ, we have always had a mailing list and use the project GitHub to track issues and pull requests.  With all of these ways to interact with the Alien::Base team you may be wondering what the best way to get your questions answered is.  As it turns out, the preferred way of contacting us is whatever is whichever of those you prefer!</p>

<p><a href="https://groups.google.com/forum/#!forum/perl5-alien">https://groups.google.com/forum/#!forum/perl5-alien</a><br />
<a href="https://github.com/Perl5-Alien/Alien-Base/issues">https://github.com/Perl5-Alien/Alien-Base/issues</a></p>

<p>Now I also mentioned a new feature.  New in version 0.020 is the inclusion of command helpers that can be used to compute build and install commands at build time.  These are used if the packages needs to be built from source.  To see why this is useful, consider packages that require the GNU version of make to build from source.  Normally when creating your Alien module, you’d include something like this in your Build.PL file:</p>

<pre>use Alien::Base::ModuleBuild;
Alien::Base::ModuleBuild->new(
  dist_name => 'Alien::Foo',
  alien_build_commands => [
    'make',
  ],
  alien_install_commands => [
    'make install PREFIX=%s',
  ],
)->create_build_script;</pre>

<p>The problem is that while make will invoke GNU make on Linux, it will typically fail on FreeBSD or OS X where the GNU version is usually either gmake, or just not provided.  The core module Config comes with a guess as to the correct name of GNU make, but I recommend not using it as it is frequently wrong.  Instead you can use <a href="https://metacpan.org/pod/Alien::gmake">Alien::gmake</a>, which is itself an alien module that will detect a locally installed GNU make, or build and install it for you.</p>

<pre>use Alien::Base::ModuleBuild;
Alien::Base::ModuleBuild->new(
  dist_name => 'Alien::Foo',
  # this will make Alien::gmake a build prereq 
  # if our library needs to be built from source
  alien_bin_requires => { 'Alien::gmake' => 0 },
  alien_helper => { gmake => 'Alien::gmake->exe' },
  # %{gmake} gets replaced by the result of
  # Alien::gmake->exe
  alien_build_commands => [
    '%{gmake}',
  ],
  alien_install_commands => [
    '%{gmake} install PREFIX=%s',
  ],
)->create_build_script;</pre>

<p>The helper is specified as Perl code in a string that gets evaluated during the build or install steps.  You can include arbitrary Perl here to compute the correct command or arguments as you need them.  Unfortunately a code reference cannot be used, because of the limitations of Module::Build.</p>

<p>Because makefile compatibility is a persistent problem with some packages, <a href="https://metacpan.org/pod/Alien::gmake">Alien::gmake</a> provides its own <tt>%{gmake}</tt> helper, which you can use so long as you require a recent enough <a href="https://metacpan.org/pod/Alien::gmake">Alien::gmake</a>.</p>

<pre>use Alien::Base::ModuleBuild;
Alien::Base::ModuleBuild->new(
  dist_name => 'Alien::Foo',
  # The built in %{gmake} helper was added to
  # Alien::gmake in version 0.09.
  alien_bin_requires => { 'Alien::gmake' => 0.09 },
  # no longer need to define our own %{gmake}
  alien_build_commands => [
    '%{gmake}',
  ],
  alien_install_commands => [
    '%{gmake} install PREFIX=%s',
  ],
)->create_build_script;</pre>

<p>Prior to <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a> 0.020 in order to include this sort of logic you would have to use <a href="https://metacpan.org/pod/Alien::gmake">Alien::gmake</a> in your <tt>Build.PL</tt>, which would make it a configure_requires requirement.  This is undesirable, because you won’t need <a href="https://metacpan.org/pod/Alien::gmake">Alien::gmake</a> if you are using the system version of a library!  The <tt>alien_bin_requires</tt> are dynamic prerequisites that are added only if you are building from source.</p>

<p>Next week I intend on writing about <a href="https://metacpan.org/pod/Alien::Base">Alien::Base</a>, and this time I will focus system integrators, distribution packagers and destdir.  See you then.</p>]]>
        
    </content>
</entry>

<entry>
    <title>Add a LICENSE file to your distribution - it&apos;s easy!</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/ether/2015/07/add-a-license-file-to-your-distribution---its-easy.html" />
    <id>tag:blogs.perl.org,2015:/users/ether//525.6925</id>

    <published>2015-07-14T22:13:34Z</published>
    <updated>2015-07-26T00:06:09Z</updated>

    <summary>Every distribution should have a LICENSE file, that corresponds to the licensing information contained in your Makefile.PL. You can create this file from the command line by installing App::Software::License - e.g. cpanm App::Software::License. Then, just invoke the software-license command....</summary>
    <author>
        <name>Ether</name>
        <uri>https://metacpan.org/author/ETHER</uri>
    </author>
    
    <category term="cpandistribution" label="cpan distribution" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ether/">
        <![CDATA[<p>Every distribution should have a LICENSE file, that corresponds to the licensing information contained in your Makefile.PL.</p>

<p>You can create this file from the command line by installing <a href="https://metacpan.org/pod/App::Software::License">App::Software::License</a> - e.g. <code>cpanm App::Software::License</code>.  Then, just invoke the <code>software-license</code> command.</p>
]]>
        <![CDATA[<p>e.g. for the DBI distribution, using the year of the first release (from the Changes file), the main author's name (from Makefile.PL) and license type (also from Makefile.PL):</p>

<pre><code>software-license --holder 'Tim Bunce' --license Perl_5 --type fulltext --year 1992 &gt; LICENSE
</code></pre>

<p>Then, commit the new file to your revision control system, and add the new file to MANIFEST (either manually, or by running <code>make manifest</code>).</p>

<p>If you are using <a href="https://metacpan.org/pod/Dist::Zilla">Dist::Zilla</a> to manage your distribution packaging, you can skip all this, and simply add <code>[License]</code> to your dist.ini. (It's also in the <code>[@Basic]</code> plugin bundle.)</p>
]]>
    </content>
</entry>

<entry>
    <title>More about YAPC::BR</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/frederico_recsky/2015/07/more-about-yapcbr.html" />
    <id>tag:blogs.perl.org,2015:/users/frederico_recsky//2579.6924</id>

    <published>2015-07-14T11:42:40Z</published>
    <updated>2015-07-14T12:05:38Z</updated>

    <summary> So we have a new fresh face to our site. http://yapcbrasil2015.org Also there is still time to get a cheap plane ticket to come :). The system that we are using to make the payment only works on Brazil...</summary>
    <author>
        <name>Frederico Recsky</name>
        <uri>http://frederico.me</uri>
    </author>
    
        <category term="YAPC" scheme="http://www.sixapart.com/ns/types#category" />
    
    <category term="yapcbr" label="yapc::BR" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/frederico_recsky/">
        <![CDATA[<p><br />
So we have a new fresh face to our site.  </p>

<p><a href="http://yapcbrasil2015.org">http://yapcbrasil2015.org</a></p>

<p>Also there is still time to get a cheap plane ticket to come :). </p>

<p>The system that we are using to make the payment only works on Brazil but you can just drop an email to the organization and we will arrange everything to you.</p>

<p>I have to share with you that just changing the layout of the website the visits grow three times.  Kind of obvious but the ugly site works ok with us from the community but not for "outsiders".  Even to reach perl programmers that usually does not participate of the groups the "beautiful site" works way better. </p>]]>
        
    </content>
</entry>

<entry>
    <title>Testing your sqitch changes</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/ovid/2015/07/testing-your-sqitch-changes.html" />
    <id>tag:blogs.perl.org,2015:/users/ovid//11.6921</id>

    <published>2015-07-14T02:41:09Z</published>
    <updated>2015-07-26T13:04:45Z</updated>

    <summary>When you work on larger projects, you&apos;ll often find that database changes are hard. Multiple developers, working on the same project, changing the same tables, can be difficult. Database migration tools often (but not always), come with one or more...</summary>
    <author>
        <name>Ovid</name>
        <uri>http://www.allaroundtheworld.fr/</uri>
    </author>
    
    <category term="sqitch" label="sqitch" scheme="http://www.sixapart.com/ns/types#tag" />
    <category term="veure" label="veure" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ovid/">
        <![CDATA[<p>When you work on larger projects, you'll often find that database changes are <em>hard</em>. Multiple developers, working on the same project, changing the same tables, can be difficult. Database migration tools often (but not always), come with one or more standard flaws:</p>

<ul>
<li>Reliance on migration numbers (in other words, two or more developers commit migration number 6 and get a conflict)</li>
<li>Reliance on an ORM, such as <code>DBIx::Class</code> (sucks for the Python devs)</li>
<li>Reliance on something other than the Data Definition Language, or DDL (sucks when your custom tool can't represent the stored procedure you want to define)</li>
</ul>

<p>There are plenty of other ways database migration tools fail, but the best standard tool I've worked with so far is <a href="http://sqitch.org/">sqitch</a>. Its documentation needs some work, including more explanations of how to deal with common failure modes, but it avoids the above problems and provides you with a rich set of tools to make database migrations easier for large teams.</p>

<p>However, its common failure modes include:</p>

<ol>
<li>Creating a "revert" change that doesn't revert.</li>
<li>"verify" scripts that work now but don't work in the future (for example, when MySQL is changed to "strict" mode)</li>
<li>Hard-to-comprehend error messages about changes not appearing in the plan (usually a merge conflict that can be solved with reverting some changes and re-deploying)</li>
</ol>

<p>There's work being done on some of these issues, but the first two can be mitigated with a simple test script I wrote.</p>
]]>
        <![CDATA[<p>The following is what I use on <a href="http://blogs.perl.org/mt/mt-search.fcgi?blog_id=11&amp;tag=veure&amp;limit=20">the Veure project</a> (which is coming along nicely) and is hacked together for PostgreSQL. You'll need to adjust it for your system.</p>

<p>The way it works is simple: </p>

<ul>
<li><code>sqitch add some/change</code></li>
<li>Edit <code>sqitch/{deploy,verify,revert}/some/change.sql</code></li>
<li><code>prove t/sqitch.t</code></li>
</ul>

<p>Note that we <em>don't</em> commit our changes to git (or your preferred source control). Nor do we deploy our changes. Instead, <code>t/sqitch.t</code> creates a test database and deploys all changes, verifies them, and then reverts them. Only if this test passes do you commit and deploy your changes.</p>

<p>I've a more complicated version I've written for ZipRecruiter, a client we've been helping (<a href="https://www.ziprecruiter.com/careers">check 'em out. They're great to work for</a>) and it's helped find plenty of interesting issues.</p>

<script src="https://gist.github.com/Ovid/295df2e46d66cb06f4a9.js"></script>
]]>
    </content>
</entry>

<entry>
    <title>Grants for applications (vs. Perl infrastructure)?</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/makoto_nozaki/2015/07/grants-for-applications-vs-perl-infrastructure.html" />
    <id>tag:blogs.perl.org,2015:/users/makoto_nozaki//393.6923</id>

    <published>2015-07-14T02:00:00Z</published>
    <updated>2015-07-14T01:34:25Z</updated>

    <summary>Somebody asked me: Is the Foundation mainly interested in grants to help fund work on Perl&apos;s own infrastructure -- the language itself, key modules, and other community projects -- or would it also be open to considering funding open-source applications...</summary>
    <author>
        <name>Makoto Nozaki</name>
        <uri>http://facebook.com/nozaki</uri>
    </author>
    
    <category term="grants" label="Grants" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/makoto_nozaki/">
        <![CDATA[<p>Somebody asked me:</p>

<blockquote>
  <p>Is the Foundation mainly interested in grants to help fund work on Perl's own infrastructure -- the language itself, key modules, and other community projects -- or would it also be open to considering funding open-source applications created with Perl, but which don't primarily exist to support Perl itself? (And which, perhaps, might help further Perl's reputation, and provide the world with more high-quality example code?)</p>
</blockquote>

<p>Our grants program does not specify such scope. So our official answer is: "just send a proposal for review". I also went through the historical grants, both approved and rejected, and found no grant proposals in this area.</p>

<p>Anyway, even without specific grant proposals, I thought it would be interesting to ask this question to the public. Should we fund application development Perl?</p>

<p>I think it's a good thing for the Perl community to support software development in Perl. For instance, if somebody writes a face recognition website in Perl and gets one million visitors, it'll be a good exposure for Perl itself. There's no reason to limit the program to the "infrastructure" = bottom of the Perl development stack.</p>

<p>Will it fit in the existing grants program? Unlike developing a Perl module with promised features, it may not be straightforward to quantify value of such development activities until it's released and used. It can well fit in the grants program if the deliverable is well quantified.</p>

<p>What's your view?</p>

<p>(P.S. I see some people can't comment at blogs.perl.org. If you have an issue, feel free to email to me so I can publish your comments here)</p>
]]>
        

    </content>
</entry>

<entry>
    <title>Grant idea - pack and unpack on streams</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/makoto_nozaki/2015/07/grant-idea---pack-and-unpack-on-streams.html" />
    <id>tag:blogs.perl.org,2015:/users/makoto_nozaki//393.6922</id>

    <published>2015-07-14T01:00:00Z</published>
    <updated>2015-07-14T01:02:11Z</updated>

    <summary>Merijn Brand gave me this proposal. As it&#8217;s too long for our grant ideas list, I am posting here. Currently, pack and unpack work on a string, which means that you have to move forward in the data-string yourself, if...</summary>
    <author>
        <name>Makoto Nozaki</name>
        <uri>http://facebook.com/nozaki</uri>
    </author>
    
    <category term="grants" label="Grants" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/makoto_nozaki/">
        <![CDATA[<p>Merijn Brand gave me this proposal. As it&#8217;s too long for our grant ideas list, I am posting here.</p>

<blockquote>
  <p>Currently, pack and unpack work on a string, which means that you have
to move forward in the data-string yourself, if the full data-format is
not known in advance, but depends on data seen so far.</p>

<p>If one could unpack on a stream, one could unpack the picture that is
known, have the stream pointer move forward the amount of data read
from the given picture, and be ready to read the next data based on a
next, possibly different) picture.</p>

<p>Extreme &#8220;win&#8221; can be taken where the size of the data being read for a
given picture is differing per architecture, like native floats.</p>

<p>From PerlMonks thread <a href="http://www.perlmonks.org/?node_id=1104462">http://www.perlmonks.org/?node_id=1104462</a></p>

<p>Perl Monks, I humbly seek your wisdom:
I wish to unpack a series of strustures from a binary file. I have used:</p>

<p>@array = unpack (&#8220;f*&#8221;, join (&#8220;&#8221;, <$filehandle>));</p>

<p>to load an array of floats into memory from a smaller binary file, but
a) This file is too big to fit in memory
b) It has a complex structure, like &#8220;int, int, float, float, float&#8221; repeating.</p>

<p>How shall I iteratively unpack the next structure from the file into
a list of scalars, without loading the whole file into memory?</p>

<p>[ikegami] came with this solution:</p>

<p>my $template = &quot;iifff&quot;;<br>
my $rec_size = template_len ($template);<br>
while (1) {<br>
   my $rv = read ($fh, my $rec, $rec_size);<br>
  defined $rv     or  die &#8220;$!\n&#8221;;<br>
  $rv             or  last;<br>
   $rv &lt; $rec_size and die &#8220;Premature EOF\n&#8221;;<br>
 <br>
  my @fields = unpack $template, $rec;<br>
   &#8230;<br>
   }<br></p>

<p>which does not show the required template_len function that needs to
calculate the actual data length for a given picture (possibly by using
the picture to pack data into a string and ask for its length).</p>

<p>Having the suggested functionality, that code could be simplified to</p>

<p>while (my @fields = unpack &#8220;iifff&#8221; => $fh) {<br>
   &#8230;<br>
   }<br></p>

<p>See also this thread on perlmonks:
<a href="http://www.perlmonks.org/?node_id=1104462">http://www.perlmonks.org/?node_id=1099544</a>
where attached PM-1099544-0.pl has been rewritten to PM-1099544-1.pl
first to make the code easier and readable, and then - given unpack
on streams were possible - rewritten to PM-1099544-2.pl
This example is just eliminating 3 read calls</p>
</blockquote>

<p>If you need the attached *.pl files, contact Merijn or me.</p>
]]>
        

    </content>
</entry>

<entry>
    <title>Grant ideas</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/makoto_nozaki/2015/07/grant-ideas.html" />
    <id>tag:blogs.perl.org,2015:/users/makoto_nozaki//393.6920</id>

    <published>2015-07-13T02:00:00Z</published>
    <updated>2015-07-13T02:45:30Z</updated>

    <summary>I made a list of grant idas. Nothing fancy but it&apos;s just a start. Share grant ideas. Use the ideas. Improve Perl....</summary>
    <author>
        <name>Makoto Nozaki</name>
        <uri>http://facebook.com/nozaki</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/makoto_nozaki/">
        <![CDATA[<p>I made <a href="http://www.perlfoundation.org/grant_ideas">a list of grant idas</a>. Nothing fancy but it's just a start.</p>

<p>Share grant ideas. Use the ideas. Improve Perl.</p>
]]>
        

    </content>
</entry>

<entry>
    <title>Finding Common Ground ... in Both Directions</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/buddy_burden/2015/07/finding-common-ground-in-both-directions.html" />
    <id>tag:blogs.perl.org,2015:/users/buddy_burden//1118.6919</id>

    <published>2015-07-13T00:24:27Z</published>
    <updated>2015-07-13T01:10:24Z</updated>

    <summary><![CDATA[Last week I formulated an interesting problem in text processing while working on one of my hobbies.&nbsp; Since I was only able to devote an hour or two here and there, it took me a few days to get the...]]></summary>
    <author>
        <name>Buddy Burden</name>
        <uri>http://blogs.perl.org/users/buddy_burden/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/buddy_burden/">
        <![CDATA[<p>Last week I formulated an interesting problem in text processing while working on one of my hobbies.&nbsp; Since I was only able to devote an hour or two here and there, it took me a few days to get the solution up and running, which indicated to me that it wasn&rsquo;t as simple as I&rsquo;d thought it would be at first.&nbsp; And since &ldquo;not simple&rdquo; often means &ldquo;interesting,&rdquo; I thought I&rsquo;d share it here with you.&nbsp; (Note that I don&rsquo;t claim this is the best solution, or the most efficient, or the most elegant.&nbsp; I&rsquo;m perfectly happy to receive suggestions for improvement if you&rsquo;re so inclined.)</p>

<p>The exact application isn&rsquo;t important, <sup><small><a href="#note1">1</a></small></sup> so let&rsquo;s just look at the general parameters.&nbsp; There&rsquo;s a series of cards, and each card has one or more powers on it (where a &ldquo;power&rdquo; in this case just means a block of text).&nbsp; I have a file with all the powers in it, and a little script to help me search for patterns within and across the powers.&nbsp; Let&rsquo;s assume the powers come in, one per line, like so:</p>

<pre><code class="prettyprint">Name of Card / Name of Power : Description text of power.
</code></pre>

<p>(They&rsquo;re not actually formatted like that in the file, but I have another script that transforms them into this.)&nbsp; So my analyze script lets me search for a given regex (Perl-style, natch) and prints a nice summary of the results, like so:<sup><small><a href="#note2">2</a></small></sup><br />
</p>]]>
        <![CDATA[<pre><code class="prettyprint">analyze 'after attacking'
 
5 times in 5 powers on 5 cards
  After attacking : 5
</code></pre>

<p>Okay, that one isn&rsquo;t very exciting.&nbsp; But suppose we search for something a little more flexible?</p>

<pre><code class="prettyprint">analyze 'add\w* \w+ dic?e'
 
43 times in 39 powers on 36 cards
  add 1 die : 6
  add 2 dice : 3
  add 3 dice : 1
  add 4 dice : 1
  additional attack dice : 6
  additional attack die : 16
  additional defense dice : 1
  additional defense die : 7
  adds 1 die : 1
  adds 4 dice : 1
</code></pre>

<p>That&rsquo;s pretty useful, and it doesn&rsquo;t take a lot of code to get us this&mdash;hey, this is Perl, after all.</p>

<pre><code class="prettyprint">my $times = 0;
my (@powers, %cards, %instances);
while ( &lt;&gt; )
{
    my $fullpower = $_;
    if ( /$pattern/io )
    {
        $times +=()= m/$pattern/gio;
        $fullpower =~ m{^(.*?) / } or die("can't figure out which card this is: $_");
        $cards{$1} = 1;
        ++$instances{$1} while m/(\w*$pattern\w*)/gio;
 
        $fullpower =~ s/($pattern)/ colored($1, qw&lt; bold green &gt;) /egio;
        push @powers, $fullpower;
    }
}
 
say "$times times in " . scalar(@powers) . " powers on " . (keys %cards) . " cards";
say "  $_ : $instances{$_}" foreach keys %instances;
if ($opts-&gt;{'v'})
{
    say '';
    say foreach @powers;
}
</code></pre>

<p>(The real code has a bit more to it, but this is all we need to look at for today&rsquo;s purposes.)&nbsp; So we&rsquo;re going through our input, one line at a time.<sup><small><a href="#note3">3</a></small></sup>&nbsp; First we copy the power, then we search for our pattern (the <code class="prettyprint">/o</code> modifier helps with efficiency, since the pattern won&rsquo;t change throughout the program).&nbsp; If we find it, we count how many times the pattern appears and add that to our overall counter.&nbsp; Then we pull the card name out so we can keep track of the total number of cards.&nbsp; Then we compile the instance and its count&mdash;this is for the breakdown that appears underneath our totals.&nbsp; Notice that this second time we search, we surround our pattern with <code class="prettyprint">\w*</code>: that allows our instances to be composed of whole words only.&nbsp; Finally, we mark the text we found in green and push that onto an array just in case the user wants to see the full text of everything that matches.&nbsp; Print out the summary and voil&agrave;: we&rsquo;re all set.</p>

<p>Now, this was a fairly basic, first attempt.&nbsp; Not to imply that I got this close my first time out of the gate, but this was my first attempt which actually worked, and I ran with this for a long while.</p>

<p>When I started fiddling again, I came up with a couple of very mild improvements:</p>

<pre><code class="prettyprint">my $times = 0;
my (@powers, %cards, %instances);
while ( &lt;&gt; )
{
    my $fullpower = $_;
    if ( /$pattern/io )
    {
        $fullpower =~ m{^(.*?) / } or die("can't figure out which card this is: $_");
        $cards{$1} = 1;
        ++$times and ++$instances{$1} while m/(\w*$pattern\w*)/gio;
 
        $fullpower =~ s/($pattern)/ colored($1, qw&lt; bold green &gt;) /egio;
        push @powers, $fullpower;
    }
}
 
say "$times times in " . scalar(@powers) . " powers on " . (keys %cards) . " cards";
say "  $_ : $instances{$_}" foreach sort keys %instances;
if ($opts-&gt;{'v'})
{
    say '';
    say foreach @powers;
}
</code></pre>

<p>There are only two differences here.&nbsp; First of all, I ditched my oh-so-clever use of the <a href="https://metacpan.org/pod/distribution/perlsecret/lib/perlsecret.pod#Goatse">goatse</a> operator, tortured into something even more unspeakable via mutation with the <code class="prettyprint">+=</code> operator.&nbsp; Although, honestly, it wasn&rsquo;t the fact that I was writing something that very few readers would understand that bugged me: it was the fact that I was searching for the same pattern in the same text 3 times in a row.&nbsp; At least this way I got it down to 2.&nbsp; And, yes: it&rsquo;s true that <code class="prettyprint">/$pattern/gio</code> and <code class="prettyprint">/(\w*$pattern\w*)/gio</code> aren&rsquo;t technically the same pattern.&nbsp; But, if you think about it, they&rsquo;re both going to match the same number of times, which is all we care about in this case.</p>

<p>The second difference is just that I sorted the summary instances.&nbsp; At first I thought I wouldn&rsquo;t care, which is why I didn&rsquo;t bother in the first place.&nbsp; But, in practice, I found that sorting helped group similar instances together, which made the output more useful.</p>

<p>Now here&rsquo;s the search I did recently which led me to ponder my improvement:</p>

<pre><code class="prettyprint">analyze '\w+ space'
 
226 times in 180 powers on 130 cards
  1 space : 2
  10 spaces : 1
  2 spaces : 3
  3 spaces : 2
  4 spaces : 9
  5 spaces : 8
  7 spaces : 1
  8 spaces : 2
  The space : 1
  This space : 2
  X spaces : 1
  a space : 7
  additional space : 3
  additional spaces : 3
  adjacent space : 1
  chosen space : 1
  counting spaces : 48
  dungeon space : 3
  empty space : 9
  empty spaces : 2
  ice space : 4
  ice spaces : 2
  land space : 1
  lava space : 1
  lava spaces : 6
  level space : 5
  of spaces : 2
  one space : 2
  road space : 1
  shadow space : 7
  sight spaces : 49
  snow space : 2
  switching spaces : 1
  that space : 3
  the space : 3
  those spaces : 3
  unoccupied space : 2
  water space : 16
  water spaces : 7
</code></pre>

<p>My first thought was that it would be nice to &ldquo;collapse&rdquo; some of those, like turn &ldquo;2 spaces&rdquo; and &ldquo;3 spaces&rdquo; and so forth into, say, &rdquo;# spaces.&rdquo;  So I did that; it was pretty simple, and therefore uninteresting, so I&rsquo;m not going to show that here.&nbsp; But my next thought was far more intriguing.</p>

<p>See, I happen to know that every power that has the words &ldquo;sight spaces&rdquo; has them in the phrase &ldquo;clear sight spaces.&rdquo;  So I started to wonder if there was a way to have the program show me that: sort of a way to &ldquo;expand&rdquo; the instances.<sup><small><a href="#note4">4</a></small></sup>&nbsp; This turns out to be one of those problems that&rsquo;s easy to grasp as a human, but difficult to explain to a computer.&nbsp; So let&rsquo;s try to specify exactly what &ldquo;expanding&rdquo; means in this context.</p>

<p>Given a set of words that appear in several texts, find all contiguous words that appear in identical positions in all the texts.&nbsp; So, basically: take the first instance in a set, find the word immediately previous to the found phrase, then check to see if that same word appears previous to the found phrase in all other instances in the set.&nbsp; If it does, check the word before that; repeat until you find a word that isn&rsquo;t the same in all instances or you hit the beginning of the string.&nbsp; Then do the same for the word immediately following the phrase, repeating until it isn&rsquo;t found in all instances or you hit the <em>end</em> of the string.&nbsp; So, not particularly simple.&nbsp; But not that hard either.</p>

<p>One thing we&rsquo;d better decide up front is what to do when the number of instances in a set is small.&nbsp; Doesn&rsquo;t matter if the number is large or not&mdash;it&rsquo;ll work well for any number of instances from, say, ten to a thousand.&nbsp; But what if there&rsquo;s only a single instance?&nbsp; What if there are only 2 or 3, but they&rsquo;re all really the same text?&nbsp; We would &ldquo;expand&rdquo; our few words into the whole string.&nbsp; That&rsquo;s not very helpful.</p>

<p>Let&rsquo;s make some arbitrary decisions here (sometimes your decisions have to be somewhat arbitrary, but that doesn&rsquo;t mean you shouldn&rsquo;t make &rsquo;em).&nbsp; If we have one instance, we won&rsquo;t expand at all.&nbsp; To avoid expanding out to the whole string for small numbers of instances which might be exact duplicates, let&rsquo;s say we never cross a sentence boundary.&nbsp; (In general practice, determining sentence boundaries is a non-trivial task.&nbsp; But in this specific case we&rsquo;re blessed with a domain of sentences that are all declarative and contain no abbreviations.&nbsp; So we&rsquo;ll take the simplistic route of just never crossing a period.)</p>

<p>So let&rsquo;s expand our basic loop a bit:</p>

<pre><code class="prettyprint">my $times = 0;
my (@powers, %cards, %instances, %instance_refs);
while ( &lt;&gt; )
{
    my $fullpower = $_;
    if ( /$pattern/io )
    {
        $fullpower =~ m{^(.*?) / } or die("can't figure out which card this is: $_");
        $cards{$1} = 1;
        while ( m/(\w*$pattern\w*)/gio )
        {
            ++$times;
            ++$instances{$1};
            if ($opts-&gt;{'e'})
            {
                my $key = $1;
                my $ref =
                {
                    source  =&gt;  $_,
                    start   =&gt;  $-[1],
                    end     =&gt;  $+[1],
                };
                push @{ $instance_refs{$key} }, $ref;
            }
        }
 
        $fullpower =~ s/($pattern)/ colored($1, qw&lt; bold green &gt;) /egio;
        push @powers, $fullpower;
    }
}
%instances = expand_instances(%instances) if $opts-&gt;{'e'};
</code></pre>

<p>Now, assuming we&rsquo;re doing expansion, we won&rsquo;t just count our instances: we&rsquo;ll save a ref to the source that matched, along with where in the string the match begins and ends (happily, <code class="prettyprint">@-</code> and <code class="prettyprint">@+</code> exist for this very reason<sup><small><a href="#note5">5</a></small></sup>).</p>

<p>Next we need a way to find the previous word and the next word.&nbsp; We should be able to do that with a single function taking an argument indicating which direction you want to search in.&nbsp; That turned out to be a bit trickier than it seemed, but then I hit on the trick of reversing the string when searching backward for previous words.&nbsp; Here&rsquo;s what I came up with:</p>

<pre><code class="prettyprint">func find_contiguous_word ($direction, $ref, $adj)
{
    my $string = $ref-&gt;{'source'};
    my $origin;
    if ($direction eq 'prev')
    {
        $string = reverse $string;
        $origin = length($string) - $ref-&gt;{'start'} + $adj;
    }
    else
    {
        $origin = $ref-&gt;{'end'} + $adj;
    }
 
    substr($string, $origin) =~ /([^.]+?)(\W|$)/;
    return $direction eq 'prev' ? reverse $1 : $1;
}
</code></pre>

<p>The &ldquo;adjustment&rdquo; (<code class="prettyprint">$adj</code>) starts out at 0 but increases as we find more and more words in common.&nbsp; If we&rsquo;re looking backwards, we reverse the source string and set our origin to the length minus the start (because it&rsquo;s backwards now) and then add the adjustment (which is positive, so you might think we need to subtract it, except everything is backwards now).&nbsp; If we&rsquo;re looking forwards, we just need to add the adjustment to the end.&nbsp; Then we find any number of characters, as long as it&rsquo;s not a period, up to the first non-word character, or the end of the string (which will be the beginning of the string if we&rsquo;ve reversed it).&nbsp; Then we return what we found, reversing it again to make it forwards if we reversed it in the first place.&nbsp; There&rsquo;s possibly a more elegant way to do this, but this definitely works.</p>

<p>Now we just need the main event: the actual expansion calculation:</p>

<pre><code class="prettyprint">func expand_instances (%instances)
{
    my %expanded;
    foreach (keys %instances)
    {
        my $refs = $instance_refs{$_} or die("can't find ref for $_");
        if (@$refs == 1)
        {
            $expanded{$_} = $instances{$_};
        }
        else
        {
            my $first = shift @$refs;
            my ($move_back, $move_fwd) = (0,0);
            PREV_WORD: while (my $p = find_contiguous_word(prev =&gt; $first, $move_back))
            {
                foreach (@$refs)
                {
                    last PREV_WORD unless substr($_-&gt;{'source'}, $_-&gt;{'start'} - $move_back - length($p), length($p)) eq $p;
                }
                $move_back += length($p);
            }
            NEXT_WORD: while (my $n = find_contiguous_word(next =&gt; $first, $move_fwd))
            {
                foreach (@$refs)
                {
                    last NEXT_WORD unless substr($_-&gt;{'source'}, $_-&gt;{'end'} + $move_fwd, length($n)) eq $n;
                }
                $move_fwd += length($n);
            }
            my $start = $first-&gt;{'start'} - $move_back;
            my $end = $first-&gt;{'end'} + $move_fwd;
            my $key = substr($first-&gt;{'source'}, $start, $end - $start);
            $key =~ s/^\s+//;
            $expanded{$key} = $instances{$_};
        }
    }
    return %expanded;
}
</code></pre>

<p>Whew! that&rsquo;s a mouthful.&nbsp; Let&rsquo;s break it down.</p>

<p>First we make a new hash to hold our instance counts&mdash;remember, the values of our hash aren&rsquo;t going to change, just the keys.&nbsp; Rather than trying to modify the original hash, it&rsquo;s just easier to make a new one.&nbsp; For each key in the original hash, we get the corresponding ref hash.<sup><small><a href="#note6">6</a></small></sup>&nbsp; If there&rsquo;s only one instance in it, just copy the count.&nbsp; If there&rsquo;s more than one, then things get interesting.</p>

<p>First, just shift off the first one.&nbsp; Doesn&rsquo;t really matter which one we pick, so I&rsquo;m just grabbing the first one.&nbsp; I shift it off to save having to compare it against itself, which wouldn&rsquo;t tell us much.&nbsp; Set our forwards and backwards adjustments to 0.&nbsp; Now, while we find a previous word (which we won&rsquo;t, if we either hit a period or the front of the string), compare the word we found against the previous word for each of the other refs.&nbsp; If we don&rsquo;t find a match, break out of <em>both</em> loops.&nbsp; But if we have the same previous words in all the other refs, tweak our backwards adjustment and move backwards another word.&nbsp; The loops for finding the words forwards are much the same.&nbsp; It took me a few tries to get the math right for calculating the substrings, but what you see there is correct.&nbsp; I really wanted to find some clever way to combine the two loop pairs, but this is workable.</p>

<p>Now that we know how far to adjust backwards and forwards, we can figure out what our expanded key should be.&nbsp; We&rsquo;ll use the first ref&nbsp;... again, it doesn&rsquo;t actually matter which one we use, since they&rsquo;ll all give us the same answer, but <code class="prettyprint">$first</code> is already in a separate variable, so it&rsquo;s convenient.&nbsp; We adjust the start and end by the adjustments we&rsquo;ve calcualted (which might well be 0), grab the substring, and trim any spaces off the front.&nbsp; (Because of the way I&rsquo;m getting words, I&rsquo;ll have leading space if we adjusted backwards; I could probably fiddle with my regex to eliminate that, but it seemed simple enough to just trim it here.)&nbsp; Then we copy over the count into the new hash.&nbsp; And that&rsquo;s pretty much all there is to it.</p>

<p>So let&rsquo;s see our new algorithm in action:</p>

<pre><code class="prettyprint">analyze -e '\w+ space'
 
226 times in 180 powers on 130 cards
  1 space : 2
  10 spaces : 1
  2 spaces : 3
  3 spaces : 2
  4 spaces : 9
  5 spaces : 8
  7 spaces : 1
  8 spaces : 2
  All figures on those spaces : 3
  Count the minimum number of spaces between the attacker and : 2
  The space : 1
  This space may be up to : 2
  When counting spaces for : 48
  X spaces : 1
  a space : 7
  additional spaces : 3
  adjacent space : 1
  chosen space : 1
  clear sight spaces : 49
  empty space : 9
  empty spaces : 2
  is on a dungeon space, add 3 to your die roll : 3
  land space : 1
  lava space : 1
  molten lava spaces : 6
  move one additional space : 3
  normal ice spaces : 2
  one space : 2
  or ice space, : 4
  road space : 1
  same-level space adjacent to : 5
  shadow space : 7
  snow space : 2
  switching spaces : 1
  that space : 3
  the space : 3
  unoccupied space : 2
  water space : 16
  water spaces : 7
</code></pre>

<p>Our totals are the same, and we get the same number of instances with the same subtotals.&nbsp; But the instances themselves are expanded to include all common surrounding words.&nbsp; This allows me to see the maximum amount of context without causing me to end up with more groupings.</p>

<p>Hopefully you found that interesting in some small way.&nbsp; Or perhaps you&rsquo;ve spotted some glaring inefficiency, or just plain silliness that could be rewritten much more sensibly.&nbsp; As I said up at the top of the post, feel free to point those out in the comments.</p>

<p><br />
<div style="line-height: 70%;"><small><p><a name="note1">1</a> Although if you&rsquo;re super interested, you could always read about it on my <a href="http://barefootcoder.blogspot.com/2015/07/perl-blog-post-41.html">Other Blog</a>.</p><br />
<p><a name="note2">2</a> Note that my search is case-insensitve.&nbsp; I&rsquo;m searching English, not code.</p><br />
<p><a name="note3">3</a> Remember that there&rsquo;s a separate <code class="prettyprint">transform</code> script which makes each power a single line, and a wrapper script which feeds that output into the <code class="prettyprint">STDIN</code> of this script.</p><br />
<p><a name="note4">4</a> Of course, with this terminology, it could actually make sense to both &ldquo;expand&rdquo; and &ldquo;collapse&rdquo; the instances at the same time.&nbsp; Which probably indicates I need better terminology.</p><br />
<p><a name="note5">5</a> Check out their entries in <a href="http://perldoc.perl.org/perlvar.html#Variables-related-to-regular-expressions">man perlvar</a> for full details.</p><br />
<p><a name="note6">6</a> Yes, I&rsquo;m &ldquo;cheating&rdquo; a bit here by taking advantage of the fact that <code class="prettyprint">%instance_refs</code> is file-scoped.&nbsp; It saves me having to pass <code class="prettyprint">%instances</code> by reference.</p><br />
</small></div></p>]]>
    </content>
</entry>

<entry>
    <title>Test failures in File::LibMagic</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/e_choroba/2015/07/test-failures-in-filelibmagic.html" />
    <id>tag:blogs.perl.org,2015:/users/e_choroba//1749.6918</id>

    <published>2015-07-12T14:51:52Z</published>
    <updated>2015-07-12T20:59:44Z</updated>

    <summary>My June assignment for the CPAN Pull Request Challenge was File::LibMagic. The module had 50 FAIL reports at CPAN Testers, so I decided to start from them....</summary>
    <author>
        <name>E. Choroba</name>
        <uri>http://www.perlmonks.org/?node_id=832495</uri>
    </author>
    
        <category term="pr-challenge" scheme="http://www.sixapart.com/ns/types#category" />
    
    <category term="prchallengetravistestlibmagicopenbsd" label="pr-challenge travis test libmagic openbsd" scheme="http://www.sixapart.com/ns/types#tag" />
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/e_choroba/">
        <![CDATA[<p>My June assignment for the <a href="http://cpan-prc.org/">CPAN Pull Request Challenge</a> was <a href="http://p3rl.org/File::LibMagic">File::LibMagic</a>. The module had 50 FAIL reports at <a href="http://www.cpantesters.org/distro/F/File-LibMagic.html?oncpan=1&distmat=1&version=1.12&grade=3">CPAN Testers</a>, so I decided to start from them.<br />
</p>]]>
        <![CDATA[<p><br />
The first thing I noticed about the failures was they all came from OpenBSD. It scared me a bit, as the only experience with the OS I had was the test failure reports for <a href="http://p3rl.org/XML::XSH2">XML::XSH2</a> few years ago which I wasn’t able to reproduce on any other OS I could reach and which disappeared with the following releases of the module and the system, proving the underlying C libraries guilty of the problems.</p>

<p>I spent some time pondering two ways how to get access to OpenBSD—running it in a virtual machine, or getting an account at <a href="http://devio.us">Devio.us</a>. Both ways seemed complicated enough to postpone the problem until the very end of the month, when I had to do something to stay in the game.</p>

<p>Therefore, on the evening of June the 30<sup>th</sup>, I finally cloned the repository from GitHub. At first, I couldn’t run the tests at all, as I didn’t know what package contained the needed header file. There already was a <code>magic.h</code> under <tt>/usr/include/linux</tt>, but it wasn’t the right one. After several attempts, I found out I needed the <code>file-devel</code> package, which provided <tt>/usr/include/magic.h</tt>.</p>

<p>Before midnight, I was ready to run the tests—only to discover the OS was just a red herring, as I got exactly the same failures on my Linux box (OpenSUSE 13.1): for PDFs, the file type was reported correctly as <code>application/pdf</code>, but its charset was reported as <code>unknown</code> instead of the expected <code>binary</code>.</p>

<p>I changed the tests to check the <code>charset</code> with a regular expression instead of a string <code>eq</code>, and made it accepts both possibilities for PDFs:</p>

<pre>
    like($info->{mime_with_encoding},
        qr%^application/pdf; charset=(?:binary|unknown)$%,
        'mime with charset');
</pre>

<p>All the tests passed on my machine, so I submitted a <a href="https://github.com/autarch/File-LibMagic/pull/5">pull request.</a><br />
Automated tests at <a href="https://travis-ci.org/autarch/File-LibMagic/builds/69062147">Travis CI</a> failed on PerlCritic, though: it didn't like the <code>%</code> as a regex delimiter (only <code>//</code> and <code>{}</code> are accepted, but <code>/</code> would need to be escaped in <tt>application/pdf</tt>, and I don’t like <code>{}</code> as delimiters, as newer Perl versions are more strict about backspacing curly braces in regexes). Well, let the author decide what to do…</p>

<p><b>Update:</b> Merged!<br />
</p>]]>
    </content>
</entry>

<entry>
    <title>You&apos;re not too late for the CPAN Pull Request Challenge</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/neilb/2015/07/youre-not-too-late-for-the-cpan-pull-request-challenge.html" />
    <id>tag:blogs.perl.org,2015:/users/neilb//846.6917</id>

    <published>2015-07-12T01:50:32Z</published>
    <updated>2015-07-12T01:51:22Z</updated>

    <summary>The CPAN Pull Request Challenge has now been running for half a year. Hundreds of people have done pull requests on CPAN distributions. Many have fallen by the wayside, as life and other distractions caught up with them, but more...</summary>
    <author>
        <name>Neil Bowers</name>
        <uri>http://neilb.org/reviews</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/neilb/">
        <![CDATA[<p>The <a href="http://cpan-prc.org">CPAN Pull Request Challenge</a> has now been running for half a year. Hundreds of people have done pull requests on CPAN distributions. Many have fallen by the wayside, as life and other distractions caught up with them, but more than 50 are still in the game. If you haven't tried it yet, it's not too late &mdash; you can sign up any time before 31st December.</p>
]]>
        <![CDATA[<p>Each month participants are mailed a CPAN distribution, and have a month to submit at least one pull request. You might fix a bug, improve the documentation, boost the test coverage, or something else. Completing one month's assignment gets you entry into the following month's "draw" (though if you're busy, you can skip the current month, and get the next month's assignment anyway).</p>

<p>To join in, all your need to to is:</p>

<ul>
<li>Email me your github username.</li>
<li>Let me know your PAUSE id, if you have one. This isn't required, but if you have one
I need to ensure I don't assign any of your own dists to you.</li>
</ul>

<p>My email address is neil at bowers dot com.</p>
]]>
    </content>
</entry>
<entry>
    <title>Today’s bit of black perl</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/neilb/2015/07/youre-not-too-late-for-the-cpan-pull-request-challenge.html" />
    <id>tag:blogs.perl.org,2015:/users/neilb//846.6917</id>

    <published>2015-07-12T01:50:32Z</published>
    <updated>2015-07-12T01:51:22Z</updated>

    <summary>The CPAN Pull Request Challenge has now been running for half a year. Hundreds of people have done pull requests on CPAN distributions. Many have fallen by the wayside, as life and other distractions caught up with them, but more...</summary>
    <author>
        <name>Neil Bowers</name>
        <uri>http://neilb.org/reviews</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/neilb/">
        <![CDATA[<p>The <a href="http://cpan-prc.org">CPAN Pull Request Challenge</a> has now been running for half a year. Hundreds of people have done pull requests on CPAN distributions. Many have fallen by the wayside, as life and other distractions caught up with them, but more than 50 are still in the game. If you haven't tried it yet, it's not too late &mdash; you can sign up any time before 31st December.</p>
]]>
        <![CDATA[<p>Each month participants are mailed a CPAN distribution, and have a month to submit at least one pull request. You might fix a bug, improve the documentation, boost the test coverage, or something else. Completing one month's assignment gets you entry into the following month's "draw" (though if you're busy, you can skip the current month, and get the next month's assignment anyway).</p>

<p>To join in, all your need to to is:</p>

<ul>
<li>Email me your github username.</li>
<li>Let me know your PAUSE id, if you have one. This isn't required, but if you have one
I need to ensure I don't assign any of your own dists to you.</li>
</ul>

<p>My email address is neil at bowers dot com.</p>
]]>
    </content>
</entry>

</feed>
